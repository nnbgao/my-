/**
 * ==============================
 * ESP32 SLAVE - (NH·∫¨N L·ªÜNH 1)
 * ==============================
 * üìò Ch·ª©c nƒÉng:
 * - G·ª≠i (dB, Angle) cho Master.
 * - NH·∫¨N l·ªánh (command) t·ª´ Master.
 * - Hi·ªáu ch·ªânh ƒë·ªô ·ªìn.
 *
 * üîß C·∫≠p nh·∫≠t:
 * - S·∫Ω hi·ªáu ch·ªânh dB khi nh·∫≠n ƒë∆∞·ª£c l·ªánh command == 1.
 */

#include <Arduino.h>
#include <WiFi.h>
#include <esp_now.h>
#include <driver/i2s.h>
#include <math.h>

// --- C·∫•u h√¨nh I2S ---
#define I2S_WS 25
#define I2S_SD 33
#define I2S_SCK 26
#define SAMPLE_RATE 16000
#define SAMPLES 256

// --- C·∫•u h√¨nh N√∫t nh·∫•n ---
#define BUTTON_PIN 12 
float db_offset = 0.0; 

// --- C·∫•u h√¨nh Hi·ªáu ch·ªânh ---
const long CALIBRATION_TIME_MS = 5000;
long cal_start_time = 0;
bool is_calibrating = false;
float cal_sum = 0.0;
int cal_count = 0;

// --- ƒê·ªãa ch·ªâ MAC c·ªßa ESP32 Master ---
// !! QUAN TR·ªåNG: ƒê·∫£m b·∫£o ƒë·ªãa ch·ªâ n√†y kh·ªõp v·ªõi MAC c·ªßa Master !!
uint8_t masterAddress[] = {0xB8, 0xD6, 0x1A, 0xB8, 0x9F, 0x8D};

// --- C·∫•u tr√∫c d·ªØ li·ªáu G·ª¨I ---
typedef struct {
  float dB;
  float angle; 
} SoundData;

SoundData soundPacket;

// --- C·∫•u tr√∫c d·ªØ li·ªáu NH·∫¨N t·ª´ Master ---
typedef struct struct_command {
  int command; 
} struct_command;

// --- H√†m kh·ªüi t·∫°o I2S ---
void setupI2S() {
  i2s_config_t i2s_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),
    .sample_rate = SAMPLE_RATE,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_32BIT,
    .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
    .communication_format = I2S_COMM_FORMAT_I2S,
    .intr_alloc_flags = 0,
    .dma_buf_count = 8,
    .dma_buf_len = 64,
    .use_apll = false
  };
  i2s_pin_config_t pin_config = {
    .bck_io_num = I2S_SCK,
    .ws_io_num = I2S_WS,
    .data_out_num = I2S_PIN_NO_CHANGE,
    .data_in_num = I2S_SD
  };
  i2s_driver_install(I2S_NUM_0, &i2s_config, 0, NULL);
  i2s_set_pin(I2S_NUM_0, &pin_config);
  i2s_zero_dma_buffer(I2S_NUM_0);
}

// --- H√†m t√≠nh RMS ---
double calculateRMS(int32_t *data, int samples) {
  double mean = 0;
  for (int i = 0; i < samples; i++) mean += data[i];
  mean /= samples;
  double sum = 0;
  for (int i = 0; i < samples; i++) {
    double x = (data[i] - mean) / 2147483648.0; 
    sum += x * x;
  }
  return sqrt(sum / samples);
}

// --- Callback khi G·ª¨I d·ªØ li·ªáu XONG ---
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  if (!is_calibrating) {
    if (status == ESP_NOW_SEND_SUCCESS) {
      Serial.println("üì§ G·ª≠i th√†nh c√¥ng");
    } else {
      Serial.println("‚ùå G·ª≠i th·∫•t b·∫°i");
    }
  }
}

// --- Callback khi NH·∫¨N d·ªØ li·ªáu ---
void OnDataRecv(const uint8_t *mac_addr, const uint8_t *incomingDataBytes, int len) {
  struct_command cmd;
  // Ki·ªÉm tra ƒë·ªô d√†i g√≥i tin
  if (len == sizeof(cmd)) {
    memcpy(&cmd, incomingDataBytes, sizeof(cmd));
    
    Serial.print("\n[NH·∫¨N L·ªÜNH T·ª™ MASTER]: ");
    Serial.println(cmd.command);

    // Ki·ªÉm tra n·∫øu l·ªánh l√† 1
    if (cmd.command == 1) { 
      Serial.println("-> L·ªánh 1! B·∫Øt ƒë·∫ßu hi·ªáu ch·ªânh...");
      // K√≠ch ho·∫°t hi·ªáu ch·ªânh t·ª± ƒë·ªông
      is_calibrating = true;
      cal_start_time = millis();
      cal_sum = 0.0;
      cal_count = 0;
      Serial.printf("\n*** B·∫ÆT ƒê·∫¶U HI·ªÜU CH·ªàNH (T·ª™ XA) - GI·ªÆ Y√äN L·∫∂NG (2 GI√ÇY) ***\n");
    }
  } else {
    Serial.println("L·ªói: Nh·∫≠n ƒë∆∞·ª£c g√≥i l·ªánh kh√¥ng ƒë√∫ng k√≠ch th∆∞·ªõc.");
  }
}

void setup() {
  Serial.begin(115200);
  
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  
  setupI2S();
  WiFi.mode(WIFI_STA); 

  if (esp_now_init() != ESP_OK) {
    Serial.println("‚ùå L·ªói kh·ªüi t·∫°o ESP-NOW");
    return;
  }

  // --- ƒêƒÉng k√Ω c·∫£ 2 callback G·ª¨I v√† NH·∫¨N ---
  esp_now_register_send_cb(OnDataSent);
  esp_now_register_recv_cb(OnDataRecv); 

  // Th√™m Master v√†o Peer
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, masterAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;
  
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("‚ùå L·ªói th√™m Peer");
  }

  Serial.println("‚úÖ ESP32 SLAVE kh·ªüi ƒë·ªông ho√†n t·∫•t! (S·∫µn s√†ng nh·∫≠n l·ªánh 1)");
  Serial.printf("üí° Nh·∫•n n√∫t (GPIO %d) ho·∫∑c ch·ªù l·ªánh t·ª´ Master ƒë·ªÉ hi·ªáu ch·ªânh.\n", BUTTON_PIN);
}

void loop() {
  size_t bytes_read;
  int32_t buffer[SAMPLES];
  i2s_read(I2S_NUM_0, (void*)buffer, sizeof(buffer), &bytes_read, portMAX_DELAY);

  double rms = calculateRMS(buffer, SAMPLES);
  double raw_dB = 20 * log10(rms) + 120; // +120 l√† offset cho INMP441
  
  // --- LOGIC HI·ªÜU CH·ªàNH (N√∫t b·∫•m C·ª§C B·ªò) ---
  if (digitalRead(BUTTON_PIN) == LOW && !is_calibrating) {
    is_calibrating = true;
    cal_start_time = millis();
    cal_sum = 0.0;
    cal_count = 0;
    Serial.printf("\n*** B·∫ÆT ƒê·∫¶U HI·ªÜU CH·ªàNH (C·ª§C B·ªò) - GI·ªÆ Y√äN L·∫∂NG (2 GI√ÇY) ***\n");
  }
  
  // --- X·ª≠ l√Ω hi·ªáu ch·ªânh (Chung cho c·∫£ 2) ---
  if (is_calibrating) {
    cal_sum += raw_dB;
    cal_count++;
    
    long elapsed = millis() - cal_start_time;
    Serial.printf("\rThu th·∫≠p: %.2f gi√¢y. ƒê√£ ƒë·ªçc %d m·∫´u...", (float)elapsed / 1000.0, cal_count);

    if (elapsed >= CALIBRATION_TIME_MS) {
      is_calibrating = false;
      if (cal_count > 0) {
        db_offset = cal_sum / cal_count;
      } else {
        db_offset = 0.0;
      }
      
      Serial.printf("\n*** HI·ªÜU CH·ªàNH HO√ÄN T·∫§T ***\n");
      Serial.printf("Offset m·ªõi (M·ª©c ·ªìn m√¥i tr∆∞·ªùng TB): %.2f dB (Trung b√¨nh t·ª´ %d m·∫´u)\n", db_offset, cal_count);
    }
    
    // T·∫°m d·ª´ng g·ª≠i khi ƒëang hi·ªáu ch·ªânh
    return;
  }

  // --- G·ª¨I D·ªÆ LI·ªÜU ƒê√É HI·ªÜU CH·ªàNH ---
  float adjusted_dB = raw_dB - db_offset;
  
  if (adjusted_dB < 0) {
    adjusted_dB = 0.0;
  }
  
  soundPacket.dB = adjusted_dB;
  soundPacket.angle = 180.0; // G·ª≠i g√≥c 180

  esp_err_t result = esp_now_send(masterAddress, (uint8_t*)&soundPacket, sizeof(soundPacket));
  
  Serial.printf("G·ª≠i: %.2f dB (Raw: %.2f dB | Offset: %.2f dB)\n", adjusted_dB, raw_dB, db_offset);

  delay(50); // Th√™m delay nh·ªè ƒë·ªÉ ·ªïn ƒë·ªãnh
}
