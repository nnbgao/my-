/**
 * ==============================
 * ESP8266 MASTER - NH·∫¨N D·ªÆ LI·ªÜU & G·ª¨I QUA WIFI
 * ==============================
 * üìò Ch·ª©c nƒÉng:
 *  - Nh·∫≠n d·ªØ li·ªáu dB t·ª´ ESP32 qua ESP-NOW.
 *  - Cung c·∫•p d·ªØ li·ªáu qua HTTP server ƒë·ªÉ laptop c√≥ th·ªÉ truy c·∫≠p v·∫Ω heatmap.
 */

#include <ESP8266WiFi.h>
#include <espnow.h>
#include <ESP8266WebServer.h>

// --- WiFi Access Point ƒë·ªÉ laptop k·∫øt n·ªëi ---
const char* ssid = "NoiseMaster";
const char* password = "12345678";

// --- Bi·∫øn l∆∞u d·ªØ li·ªáu m·ªõi nh·∫•t ---
float lastDB = 0.0;
float lastAngle = 0.0;

// --- C·∫•u tr√∫c d·ªØ li·ªáu nh·∫≠n t·ª´ ESP32 ---
typedef struct struct_message {
  float dB;
  float angle;
} struct_message;

struct_message incomingData;

// --- T·∫°o web server t·∫°i c·ªïng 80 ---
ESP8266WebServer server(80);

// --- Callback khi nh·∫≠n d·ªØ li·ªáu t·ª´ ESP32 ---
void OnDataRecv(uint8_t *mac, uint8_t *incomingDataBytes, uint8_t len) {
  memcpy(&incomingData, incomingDataBytes, sizeof(incomingData));
  lastDB = incomingData.dB;
  lastAngle = incomingData.angle;
  Serial.printf("Nh·∫≠n ƒë∆∞·ª£c: %.2f dB | G√≥c %.2f¬∞\n", lastDB, lastAngle);
}

// --- Route HTTP ƒë·ªÉ laptop ƒë·ªçc d·ªØ li·ªáu ---
void handleData() {
  String json = "{\"dB\":" + String(lastDB, 2) + ",\"angle\":" + String(lastAngle, 2) + "}";
  server.send(200, "application/json", json);
}

void setup() {
  Serial.begin(115200);

  // --- T·∫°o WiFi Access Point ---
  WiFi.mode(WIFI_AP);
  WiFi.softAP(ssid, password);
  Serial.print("WiFi Master ph√°t t·∫°i: ");
  Serial.println(WiFi.softAPIP());

  // --- Kh·ªüi t·∫°o ESP-NOW ---
  if (esp_now_init() != 0) {
    Serial.println("ESP-NOW kh·ªüi t·∫°o th·∫•t b·∫°i!");
    return;
  }
  esp_now_set_self_role(ESP_NOW_ROLE_COMBO);
  esp_now_register_recv_cb(OnDataRecv);

  // --- C·∫•u h√¨nh web server ---
  server.on("/data", handleData);
  server.begin();
  Serial.println("HTTP Server ƒë√£ s·∫µn s√†ng!");
}

void loop() {
  server.handleClient(); // L·∫Øng nghe laptop y√™u c·∫ßu
}